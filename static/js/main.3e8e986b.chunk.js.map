{"version":3,"sources":["TodoItem.js","todosData.js","App.js","index.js"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","handleChange","id","style","fontStyle","color","textDecoration","text","todosData","App","state","todos","bind","this","setState","prevState","map","todo","todoItems","key","basename","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iOAyBeA,MAnBf,SAAkBC,GAOd,OACI,yBAAKC,UAAU,aACX,2BACIC,KAAK,WACLC,QAASH,EAAMI,KAAKC,UACpBC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAElD,uBAAGC,MAAOT,EAAMI,KAAKC,UAbN,CACnBK,UAAW,SACXC,MAAO,UACPC,eAAgB,gBAUqC,MAAOZ,EAAMI,KAAKS,QCQhEC,EA5BG,CACd,CACIN,GAAI,EACJK,KAAM,qBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,WACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mCACNR,WAAW,I,QC6BJU,E,kDAnCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,MAAOH,GAEX,EAAKP,aAAe,EAAKA,aAAaW,KAAlB,gBALV,E,yDAQDV,GACTW,KAAKC,UAAS,SAAAC,GAOV,MAAO,CACHJ,MAPiBI,EAAUJ,MAAMK,KAAI,SAAAC,GAIrC,OAHIA,EAAKf,KAAOA,IACZe,EAAKlB,WAAakB,EAAKlB,WAEpBkB,W,+BAQT,IAAD,OACCC,EAAYL,KAAKH,MAAMC,MAAMK,KAAI,SAAAlB,GAAI,OAAI,kBAAC,EAAD,CAAUqB,IAAKrB,EAAKI,GAAIJ,KAAMA,EAAMG,aAAc,EAAKA,kBAEtG,OACE,kBAAC,IAAD,CAAYmB,SAAS,KACnB,yBAAKzB,UAAU,aACVuB,Q,GA7BCG,IAAMC,WCZxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3e8e986b.chunk.js","sourcesContent":["/**\n * Challenge: Style the completed todo items differently from the incomplete items.\n */\n\nimport React from \"react\"\n\nfunction TodoItem(props) {\n    const completedStyle = {\n        fontStyle: \"italic\",\n        color: \"#cdcdcd\",\n        textDecoration: \"line-through\"\n    }\n    \n    return (\n        <div className=\"todo-item\">\n            <input \n                type=\"checkbox\" \n                checked={props.item.completed} \n                onChange={() => props.handleChange(props.item.id)}\n            />\n            <p style={props.item.completed ? completedStyle: null}>{props.item.text}</p>\n        </div>\n    )\n}\n\nexport default TodoItem","const todosData = [\n    {\n        id: 1,\n        text: \"Take out the trash\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean gecko tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Arrested Development\",\n        completed: false\n    }\n]\n\nexport default todosData","/**\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\n * This challenge is a little more involved than some of the past ones. Check the comments \n * in the code for some help on accomplishing this one\n * \n * Challenge: \n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\n * 2. Pass the method down to the TodoItem component\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\n */\n\nimport React from \"react\"\nimport TodoItem from \"./TodoItem\"\nimport todosData from \"./todosData\"\nimport {HashRouter, Route, Link} from \"react-router-dom\"\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            todos: todosData\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n    \n    handleChange(id) {\n        this.setState(prevState => {\n            const updatedTodos = prevState.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed\n                }\n                return todo\n            })\n            return {\n                todos: updatedTodos\n            }\n        })\n    }\n    \n    render() {\n        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n        \n        return (\n          <HashRouter basename='/'>\n            <div className=\"todo-list\">\n                {todoItems}\n            </div>\n          </HashRouter>\n        )    \n    }\n}\n\nexport default App","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}